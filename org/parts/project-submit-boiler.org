** Final Task - Submit your code
:PROPERTIES:
:CUSTOM_ID: final-task-submit-your-code
:END:
Now that you have completed all the tasks the only thing left to do is
to submit your code as a patch so you can receive a grade for all your
hard work.

*** Turn on Two Factor
:PROPERTIES:
:CUSTOM_ID: turn-on-two-factor
:END:
Turn on [[https://support.google.com/accounts/answer/185839?hl=en&co=GENIE.Platform%3DDesktop][Two factor authentication]] for your Boise State provided email account

Do NOT skip this step. Boise State University uses Gmail as their email
provider and Gmail requires you to use two factor authentication in
order to generate an app password.

You need to use your Boise State University issued email account to send
the email and you *must* have two factor authentication turned on.

*** Generate an app password
:PROPERTIES:
:CUSTOM_ID: generate-an-app-password
:END:

If you are working in GitHub codespaces you will need to setup SMTP for
*EACH* project. This is because each codespace is tied to a specific
repository and the settings are not shared. However, if you are working
on your own personal machine or in the CS Lab then you will only have to
setup SMTP once!

In order to use [[https://git-scm.com/docs/git-send-email][git
send-email]] you will need to generate an app password. Navigate to
[[https://security.google.com/settings/security/apppasswords]] and
generate a new app password. Make sure and copy the password before you
close the window because you will not be able to see it again.

#+caption: generate app password
[[../org/images/gen-app-password.png]]


**** I can't generate a password

If you get the error shown below it typically means that you have not
enabled two factor authentication. Follow these steps to resolve the
issue:

1. Go back and ensure you have [[#turn-on-two-factor][two factor
   authentication]] enabled.
2. [[https://support.google.com/mail/answer/8154][Log out]] of your
   Gmail account
3. Log back into your Gmail account and make sure you did have to use
   two factor authentication
4. If the steps above fail then open an
   [[https://support.google.com/chrome/answer/95464][incognito tab]] and
   go back to the first step
5. If you still have issues reboot your machine and go back to the first
   step

#+caption: app password error
[[../org/images/AppPasswords.png]]

*** Setup SMTP
:PROPERTIES:
:CUSTOM_ID: setup-smtp
:END:
1. Open up a terminal in codespaces

#+caption: Open Terminal
[[../org/images/open-terminal.png]]

2. [@2] In the terminal type =git config --global --edit= and modify the
   file with the info listed below. You will need to change the info
   listed below to match your own name, email and *App Password* that
   you generated in the [[#generate-an-app-password][previous step]].

#+begin_src text
[User]
    name =  YOUR NAME
    email = YOURNAME@u.boisestate.edu
[sendemail]
    smtpserver = smtp.gmail.com
    smtpuser = YOURNAME@u.boisestate.edu
    smtpPass = xxxx xxxx xxxx xxxx
    smtpencryption = ssl
    smtpserverport = 465
#+end_src

#+caption: Edit config
[[../org/images/edit-config.png]]

Congrats you should be all setup to send code patch's over email. Now
lets create a patch!

*** Create a patch file
:PROPERTIES:
:CUSTOM_ID: create-a-patch-file
:END:
We are now going to do what is called a [[https://docs.gitlab.com/ee/user/project/merge_requests/squash_and_merge.html][squash merge]] and then create a patch file with all our
changes in one commit.

1. First lets fetch the upstream branch. This is the branch that you
   originally forked from at the start of the project

#+begin_src sh
git fetch upstream
#+end_src

2. [@2] Checkout a new branch named submit from the =upstream/master=
   branch.

#+begin_src sh
git checkout upstream/master -b submit
#+end_src

3. [@3] Now we will do a squash merge all the commits we did onto our
   new submit branch.

#+begin_src sh
git merge --squash master
#+end_src

4. [@4] Now commit those new changes to your submit branch

#+begin_src sh
git commit -m "Submit project"
#+end_src

5. [@5] Push your submit branch to GitHub

#+begin_src sh
git push -u origin
#+end_src

6. [@6] Open up a web browser and navigate to your repository on GitHub
   and confirm that your submit branch is correctly pushed. Open up the
   files and make sure that everything looks good before going to the
   next step.

#+caption: submit-branch
[[../org/images/git-submit-branch.png]]

*** Install Libraries
:PROPERTIES:
:CUSTOM_ID: install-libraries
:END:
If you are working on codespaces you will need to install the required
dependencies before you attempt to email out your patch file.

#+begin_src sh
make install-deps
#+end_src

*** Email Patch File
:PROPERTIES:
:CUSTOM_ID: email-patch-file
:END:
First make sure you are still on the submit branch that you created. If
you type =git branch= you should see a star next to the submit branch
that indicates you are currently on the submit branch.

#+begin_src sh
$ git branch
  master
,* submit
#+end_src

You MUST test your patch by emailing it to yourself first! You will go
through all the steps below with your *own* email. After you have sent
the email to yourself and tested it you can then email your submission
to the class mailing list!

Finally we can create our patch to email out!

#+begin_src sh
git send-email --to youremail@u.boisestate.edu HEAD^
#+end_src

You should see results similar to what is show below.

#+begin_src sh
$ git send-email --to youremail@u.boisestate.edu HEAD^
/tmp/T/NWEw4f1sIj/0001-Submit-project-2.patch

From: youremail@u.boisestate.edu
To:  youremail@u.boisestate.edu
Subject: [PATCH] Submit project
Date: Thu,  7 Dec 2023 20:31:55 -0700
Message-Id: <20231208033155.83099-1-shanepanter@boisestate.edu>
X-Mailer: git-send-email 2.39.3 (Apple Git-145)
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit

The Cc list above has been expanded by additional
addresses found in the patch commit message. By default
send-email prompts before sending whenever this occurs.
This behavior is controlled by the sendemail.confirm
configuration setting.

For additional information, run 'git send-email --help'.
To retain the current behavior, but squelch this message,
run 'git config --global sendemail.confirm auto'.

Send this email? ([y]es|[n]o|[e]dit|[q]uit|[a]ll): y
OK. Log says:
Server: smtp.gmail.com
MAIL FROM:  youremail@u.boisestate.edu
RCPT TO:  youremail@u.boisestate.edu
RCPT TO:  youremail@u.boisestate.edu
From: youremail@u.boisestate.edu
To:  youremail@u.boisestate.edu
Subject: [PATCH] Submit project 2
Date: Thu,  7 Dec 2023 20:31:55 -0700
Message-Id: <20231208033155.83099-1-shanepanter@boisestate.edu>
X-Mailer: git-send-email 2.39.3 (Apple Git-145)
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit

Result: 250
#+end_src

You should now be able to check your email and see your patch. Be aware
that sometimes email delivery is slightly delayed so you may have to
wait a few minutes for it to show up. Make sure and check your *spam*
folder if you don't see any mail.

*** Test your patch
:PROPERTIES:
:CUSTOM_ID: test-your-patch
:END:
You can now get your patch from Gmail and test it to make sure that
everything works and your patch was correct.

1. Checkout a new branch named =test-patch= from the upstream/master
   branch

#+begin_src sh
git checkout upstream/master -b test-patch
#+end_src

2. [@2] Push your new =test-patch= branch to *your* repo instead of the
   upstream

#+begin_src sh
 git push -u origin
#+end_src

3. [@3] Get the patch file from Gmail

#+caption: download gmail
[[../org/images/gmail-original-email.png]]

4. [@4] Copy the email to your clip board

#+caption: copy to clipboard
[[../org/images/gmail-copy-email.png]]

5. [@5] Create a new file and paste the contents that you just copied
   and save it in the root folder in a file named =my-patch.txt=.

#+caption: new file
[[../org/images/new-file.png]]

6. [@6] Make sure you saved the file correctly. It should show up in the
   file explorer as shown below.

#+caption: created file
[[../org/images/created-file.png]]

7. [@7] Now apply that patch to your new =test-patch= branch

#+begin_src sh
git am my-patch.txt
#+end_src

8. [@8] Commit your patch

#+begin_src sh
git commit -m "Testing my email patch"
#+end_src

9. [@9] Push your test patch branch to your Github Account

#+begin_src sh
git push
#+end_src

10. [@10] After you have successfully applied the patch you can delete
    the file =my-patch.txt=. *Don't* commit the file =my-patch.txt= it
    is just a temporary file that you don't want to save.

11. Finally open up the browser again and make sure you have 3 branches
    =master=, =submit=, and =test-patch=. The =submit= and =test-patch=
    branches should be identical. Each should have exactly 1 commit from
    you with all your changes.

#+caption: final state
[[../org/images/final-repo-state.png]]

*** Submit your Patch for grading
:PROPERTIES:
:CUSTOM_ID: submit-your-patch-for-grading
:END:
Assuming you have successfully completed all the steps above with your
own email and everything looked good you can now submit your patch for
grading.

Do not use the class mailing list to test your patch. You should only send an email to
{{{submitemail}}} after you have tested the process with your own email. Spamming the mailing list
with excessive patches will result in a lower grade.

When you submit to the mailing list you will automatically be cc'd on
the email so you will have a copy in your own email as proof that you
completed the assignment.

You are allowed to submit up to 3 times without penalty.

Open a terminal and submit your patch.


1. git checkout submit
2. git send-email --to {{{submitemail}}} HEAD^


Assuming all went well you are now complete! You have created a patch
file from a squash merge, emailed it and tested the resulting patch. You
are well on your way to becoming an advanced git user!

** Submitting
:PROPERTIES:
:CUSTOM_ID: submitting
:END:
You do not need to submit anything to canvas for this assignment. Your
email is your submission, your grade will be updated after the due date
(and late window) have passed.

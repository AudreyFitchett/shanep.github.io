#+SETUPFILE: ../../level-1.org
#+TITLE: Grading Rubric
#+SUBTITLE: CS408 Full Stack Web Development
#+DESCRIPTION: CS408 Full Stack Web Development

* Patch file

After applying the patch file use the guidelines below to give peer review feedback.

* Minimum standards
:PROPERTIES:
:CUSTOM_ID: minimum-standards
:END:

Projects have been carefully crafted to ensure certain learning objectives are satisfied. Thus, you
are required to solve the problem as described in the specification. For example, if the
specification asks you to implement a feature with CSS you implement it using JavaScript your
solution would not be correct even though your website may look correct.

* Testing
:PROPERTIES:
:CUSTOM_ID: testing
:END:

Some times it is not feasible to write tests for part of your program.  For example, if the project
includes a User Interface (UI) component it is very difficult to write automated tests without
extensive mocking or complicated tooling. In these cases you will be given a pass on the testing
criteria for that particular part and you will need to detail what manual tests you completed by
commenting your code with the details.

Testing consists of but is not limited to:

- Validating user input
  - User input should not crash your program
- Validating function arguments
  - Malformed input to your functions should not cause a crash
  - What happens if you pass NULL or undefined to function arguments
  - Passing values that are out of range such as negative numbers
  - Checking the return values of your functions to ensure that the
    function is returning expected values
- Defining [[https://en.wikipedia.org/wiki/Loop_invariant][loop invariants]] where appropriate.
- Using the API calls that are explicitly called out in the specification.


* General Coding Guidelines
:PROPERTIES:
:CUSTOM_ID: general-coding-guidelines
:END:

When doing your peer code review you should look for the following qualities in your fellow students
code.


** Global Variables
:PROPERTIES:
:CUSTOM_ID: global-variables
:END:

All *public* global variables are 100% banned. Private, protected, or stack local variables
variables are OK. If you truly think that the only way to solve the problem is to use a global
variable then you must *clearly* document why you are forced to use a global variable.

There are instances where it is necessary to use a public global variable because you are dealing
with a legacy API, or you are working with a poorly implemented SDK. If you are forced to use a
global variable you must clearly detail why in a comment.

Global variables make writing concurrent, async, multi-threaded code very difficult. So even if you
are not writing concurrent code (or don't even know what that means at this point) it is good to
start training yourself to use good habits so the code you write can easily be used in a concurrent
environment instead of having to refactor your code in the future.

** Formatting
:PROPERTIES:
:CUSTOM_ID: formatting
:END:

Except for languages like python, code formatting for the most part does
not impact functionality. Formatting can be very subjective so no
particular style is enforced, it is only important that you are
consistent within your own code.

There should be no reason for poorly formatted code when your editor will [[https://stackoverflow.com/questions/29973357/how-do-you-format-code-in-visual-studio-code-vscode][do it for you]]! What makes
code more or less readable is often controversial and opinionated. In this class we will not address
the philosophical aspect of putting braces on the end of the line or on a new line, or the classic
debate of tabs vs spaces, we will primarily focus on being consistent.

English scholars have long known that [[https://www.vappingo.com/word-blog/the-importance-of-punctuation/][punctuation matters]]. To quote from [[https://owl.purdue.edu/owl/general_writing/academic_writing/paragraphs_and_paragraphing/index.html][purdue's writing lab]] "Good
paragraphing also greatly assists your readers in following a piece of writing". The readability of
source code is also greatly improved by good formatting. Just because the compiler or interpreter
ignores whitespace doesn't mean you should as well.

** Spelling and Grammar
:PROPERTIES:
:CUSTOM_ID: spelling-and-grammar
:END:

I generally do not care about spelling or grammar mistakes, it is not an area I excel in :). The
only exception to this rule is if your writing is so bad I literally can't make heads or tails of
what you are trying to say. At a minimum you should spell check your documents and attempt to write
as clearly as possible. [[https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker][Spell checkers]] are even available that work with camelCase code!

** Code Ownership
:PROPERTIES:
:CUSTOM_ID: code-ownership
:END:

The starter code that is given to you may not be up to the guidelines
specified in the grading rubric. It is your responsibility to bring all
code up to the standards specified regardless of the original author. If
your instructor does not intend for you to fix any pre-existing issues
it will be clearly marked by a comment in the source. Don't assume that
all code pushed out by your instructors is perfect, in fact some code
may be wrong on purpose. Learning how to read and fix other engineers
code is a very important skill to learn. You take responsibility for
100% of the code that you submit regardless of who originally wrote it.

Some of the starter code will have *intentional defects* that your
instructor intends for you to fix! Do NOT assume that all code given to
you is perfect.

** Documentation
:PROPERTIES:
:CUSTOM_ID: documentation
:END:

HTML, CSS, and JavaScript all have comments that you can use to document your code.

1. Each function (method) or class must have a header documentation
   string specifying what the function does, what each function
   parameter does, and what the return value is.
2. Documentation inside a function (method) is only necessary when you
   have exceptionally complex code or you need to detail *why* you are
   doing something non-obvious or against what has been taught in class
   or the textbook.

For JavaScript will use [[https://jsdoc.app/][JSDoc]]. If you have any questions as
to what documentation tool you should be using you need to reach out to
your instructor or TA for guidance.

#+begin_src javascript
/**
 ,* Updates the current position of the mouse given an x,y coordinate
 ,*
 ,* @param {double} x The x coordinate of the mouse
 ,* @param {double} y The y coordinate of the mouse
 ,*/
function updateMouseLocation(x, y) {
    // ...body
}
#+end_src
